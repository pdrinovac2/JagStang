	Being a musician on the side of getting my bachelor’s in Computer Science, I knew one of my best possible ideas for this project was to connect my two biggest interests. Based off my favorite guitar, I designed a Fender Jag-Stang in Java 3D. After examining other projects done in the class, I knew creating the guitar would be possible to do without any outside resources.
	
	When building a model, the creator most likely wants to stay true to scaling all pieces of the object correctly. To do such, I bought large sheets of graph paper to properly trace the guitar and mark points that would be needed to create the proper curves. Due to the complex shape of the guitar, I knew using the GeneralPath class and the extrudeShape function from Computer Graphics Using Java 2D and 3D, by Hong Zhang and Y. Daniel Liang, would be the best route to go. The extrudeShape method on its own takes a GeneralPath and draws it over the z-axis to create a cookie-cutter like shape, as a Shape3D object. Guitars, however, need faces too, so by adding a few loops to the method, it was easy to make the method draw the faces of the paths, generating a solid-looking shape. Letting the top of the head of the guitar to sit at the origin of the Canvas3D, I plotted the head, neck, and body of the guitar in GeneralPath objects, and then used the extrudeShape method to give them a full shape and save them as Shape3D objects.
	
	Upon making these shapes, I realized I had plotted them with some problems. The objects were too big, too far off the frame, and facing upward, while I wanted the guitar to sit like someone would be playing it. In an attempt to fix all those problems at once, I thought to adjust the view so I wouldn’t have to edit the objects directly. Unfortunately, the view yielded unexpected results and seemed to be unmanageable and unusable. To prevent altering all the progress made so far, I decided to apply a Transform3D to every single object in the project. Using the Transform3D, I solved the size problem by scaling all the objects by a four-hundredth (1 / 400), which some exceptions later. This allowed all the objects to fit in the frame together without leaving too much empty space. To solve the frame problem, I applied a translation that, after much trial and error, properly aligned the objects correctly on screen so that the lower part of the next would be in the center of the screen, no matter the frame size. Finally, I solved the rotation problem; I simply applied a rotation of π / 2 so that it would sit in a way that a new player would be able to understand how the guitar is being played if it were used in a tutorial-like system.
	
	With the guitar being set in the correct place with its main pieces, the next thing to focus on was the appearance. For the most part, a flat color was set on each object using RGB color values through the use of Photoshop. A wooden texture was considered to be added to the next and head of the guitar, but being shaved down and sanded, the guitar didn’t really look like it had a wooden look to begin with. Additionally, because the objects had to be scaled down, adding textures using texture indices proved to be much too much of a hassle to work with. However, the fret board of the guitar was absolutely essential to making the guitar look complete. Due to the basic shape of the neck of the guitar, I simply used a Box primitive to set the texture onto the guitar. Using Photoshop again, I was able to properly measure the distance between each fret to provide proper ratios and make the fret board look as accurate as possible. With that complete, it was time to add the smaller objects to the guitar.
	
	To begin with, the pick guard was added to the body of the guitar. Given its complicated shape, I had to make a decision between making it less complicated to accommodate the use of texture coordinates, or deal with finding an average color to use. While looking at the design of the pick guard on the guitar, it was clear that replicating it would be too difficult, especially without good resources online. Using Photoshop, I gathered a few different colors and computed the average of them to get a light gray that wouldn’t be too light to distract from any other white on the guitar. From there, I created another instance of the pick guard, but made it solid black and increased the scale slightly to add a very thin outline so that the blue of the guitar didn’t clash too much with the light gray.
	
	Next, I added the hum bucks, also using the GeneralPath and extrudeShape setup to get the curves correct. Using the method I did with the Transform3D, I was unable to rotate an object along multiple axes at different angles.  I attempted using matrix multiplication, but the results had messed with the coordinates I already had in place, so I just plotted the points of the angled hum bucks as if they were already rotated. To add the metal circles on top, I used the Cylinder class with no depth/height and wrote a method that would generate them an appropriate distance apart after specifying where the first circle belonged. I then proceeded to add almost all the metal parts of the guitar the same way I added the pick guard, with Shape3D’s. The only exceptions were with the pieces that mark where the strings of the guitar begin and end, with them being Cylinder shapes instead, along with the knobs that would control the volume of the guitar when plugged into an electric amplifier.
	
	With everything else in place, the only thing left to add was the strings of the guitar. On their own, with the pegs and all already in place, it was easy to figure out the distances and just make long Cylinder’s stretch across the guitar. However, I knew there was a place to expand on the guitar greatly and add functionality to it. Similar to how the circles on the hum bucks were generated using a function, I knew the strings could be broken up to allow segments of the string to correspond to the individual frets of the fret board.
	
	Using the ratios gathered when making the texture of the fret board, I was able to create an automated system that generates the string segments apart from each other given the ratios and assign an appropriate length to the individual Cylinder’s so that they still came together to look like one, long Cylinder without overlapping much. The system is set up so that if picking were to be enabled, the user would be able to click on a string segment over the fret board and select it as the active fret. If the active fret was clicked again, the active fret would be set to zero, meaning no fret is being held down on that particular string, allowing in an open note. Then, if the user were to click on the longest segment over the body, the active fret on that string will play an audio clip of the note that would be played if it were an actual guitar, thus truly becoming a guitar simulator. An idea of adding a button to strum all six of the strings at once was also planned on being added, but unfortunately due to other commitments and time restrictions, these features were not added. With some more time however, these features and more could be easily implemented into the project.

	After spending what seems like weeks on trying to make this guitar look perfect, I can definitely say I am proud of the outcome. I have full intentions of expanding on this project in my own free time, as the additional features seem necessary for me to complete this project. I truly hope Java 3D continues to be supported and updated as it truly has the potential to create some big, powerful projects.
